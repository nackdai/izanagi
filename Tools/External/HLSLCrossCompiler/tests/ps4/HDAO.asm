//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//   fxc /T ps_4_1 /Fo HDAO.o /Fc HDAO.asm /EPS_RenderHDAO /DDX10_1_ENABLED
//    HDAO.fx
//
//
// Buffer Definitions: 
//
// cbuffer $Params
// {
//
//   bool b10_1;                        // Offset:    0 Size:     4
//   int iNumRingGathers;               // Offset:    4 Size:     4
//   int iNumRings;                     // Offset:    8 Size:     4
//   bool bUseNormals;                  // Offset:   12 Size:     4
//
// }
//
// cbuffer cb0
// {
//
//   float3 g_f3LightDir;               // Offset:    0 Size:    12 [unused]
//   float3 g_f3EyePt;                  // Offset:   16 Size:    12 [unused]
//   float g_fTime;                     // Offset:   28 Size:     4 [unused]
//   float4x4 g_f4x4World;              // Offset:   32 Size:    64 [unused]
//   float4x4 g_f4x4View;               // Offset:   96 Size:    64 [unused]
//   float4x4 g_f4x4WorldViewProjection;// Offset:  160 Size:    64 [unused]
//   float4x4 g_f4x4InvProjection;      // Offset:  224 Size:    64 [unused]
//   float2 g_f2RTSize;                 // Offset:  288 Size:     8
//   float g_fHDAORejectRadius;         // Offset:  296 Size:     4
//   float g_fHDAOIntensity;            // Offset:  300 Size:     4
//   float g_fHDAOAcceptRadius;         // Offset:  304 Size:     4
//   float g_fZFar;                     // Offset:  308 Size:     4 [unused]
//   float g_fZNear;                    // Offset:  312 Size:     4 [unused]
//   float g_fQ;                        // Offset:  316 Size:     4
//   float g_fQTimesZNear;              // Offset:  320 Size:     4
//   float g_fNormalScale;              // Offset:  324 Size:     4
//   float g_fAcceptAngle;              // Offset:  328 Size:     4
//   float4 g_f4MaterialDiffuse;        // Offset:  336 Size:    16 [unused]
//   float4 g_f4MaterialSpecular;       // Offset:  352 Size:    16 [unused]
//   float g_fTanH;                     // Offset:  368 Size:     4 [unused]
//   float g_fTanV;                     // Offset:  372 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_SamplePoint                     sampler      NA          NA    0        1
// g_txNormals                       texture  float4          2d    0        1
// g_txNormalsZ                      texture  float4          2d    1        1
// g_txNormalsXY                     texture  float4          2d    2        1
// g_txDepth                         texture  float4          2d    3        1
// $Params                           cbuffer      NA          NA    0        1
// cb0                               cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_Position              0   xyzw        0      POS  float       
// TEXTURE                  0   xy          1     NONE  float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_Target                0   x           0   TARGET  float   x   
//
ps_4_1
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1, 8, 1.000000, -1.000000},
                              { 8, -1, 0, 1.000000},
                              { 5, 4, 0, 3.000000},
                              { 4, -4, 2.000000, 1.000000},
                              { 5.308640, 0, 3.000000, -1.000000},
                              { 11.396100, 0, 1.000000, -3.000000},
                              { 17.926769, 0, 1.000000, -5.000000},
                              { 24.936390, 0, 3.000000, -3.000000},
                              { 0, 0, 5.000000, -1.000000},
                              { 0, 0, 4.000000, 1.000000},
                              { 0, 0, 2.000000, 3.000000},
                              { 0, 0, 0, 5.000000},
                              { 0, 0, 0, 7.000000},
                              { 0, 0, 2.000000, 5.000000},
                              { 0, 0, 4.000000, 3.000000},
                              { 0, 0, 6.000000, 1.000000},
                              { 0, 0, 7.000000, -1.000000},
                              { 0, 0, 5.000000, -3.000000},
                              { 0, 0, 3.000000, -5.000000},
                              { 0, 0, 1.000000, -7.000000},
                              { 1.000000, 0.500000, 0.447210, 0.707110},
                              { 0.500000, 0.447210, 0.707110, 1.000000},
                              { 0.300000, 0.291040, 0.379470, 0.400000},
                              { 0.424260, 0.332820, 0.379470, 0.536660},
                              { 0.400000, 0.300000, 0.291040, 0.379470},
                              { 0.536660, 0.424260, 0.332820, 0.379470},
                              { 0.315300, 0.290690, 0.241400, 0.254950},
                              { 0.360560, 0.290690, 0.260000, 0.306410},
                              { 0.260000, 0.216670, 0.213720, 0.254950},
                              { 0.290690, 0.241400, 0.254950, 0.315300},
                              { 0.290690, 0.260000, 0.306410, 0.360560},
                              { 0.216670, 0.213720, 0.254950, 0.260000},
                              { 0.175000, 0.173650, 0.197990, 0.200000},
                              { 0.221360, 0.208700, 0.240100, 0.259970},
                              { 0.247490, 0.218640, 0.240100, 0.280000},
                              { 0.221360, 0.192300, 0.197990, 0.230160},
                              { 0.200000, 0.175000, 0.173650, 0.197990},
                              { 0.259970, 0.221360, 0.208700, 0.240100},
                              { 0.280000, 0.247490, 0.218640, 0.240100},
                              { 0.230160, 0.221360, 0.192300, 0.197990} }
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb1[21], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_output o0.x
dcl_temps 12
mul r0.xy, v1.xyxx, cb1[18].xyxx
ftoi r0.zw, r0.xxxy
add r1.xy, cb1[18].xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
mov r2.zw, l(0,0,0,0)
mov r3.zw, l(0,0,0,0)
mov r1.zw, l(0,0,0,0)
loop 
  ige r4.x, r1.w, l(4)
  breakc_nz r4.x
  iadd r4.xy, -icb[r1.w + 0].xyxx, r0.zwzz
  iadd r4.zw, r0.zzzw, icb[r1.w + 0].xxxy
  iadd r4.xy, l(-1, -1, 0, 0), r4.xyxx
  itof r4.xyzw, r4.xyzw
  min r4.xyzw, r1.xyxy, r4.xyzw
  ftoi r4.xyzw, r4.xyzw
  imax r2.xy, r4.zwzz, l(0, 0, 0, 0)
  imax r3.xy, r4.xyxx, l(0, 0, 0, 0)
  if_nz cb0[0].x
    ld r4.z, r2.xyzz, t1.yzxw
    ld r5.z, r3.xyzz, t1.yzxw
    ld r4.xy, r2.xyzz, t2.xyzw
    ld r5.xy, r3.xyzz, t2.xyzw
  else 
    ld r4.xyz, r2.xyww, t0.yzxw
    ld r5.xyz, r3.xyww, t0.yzxw
  endif 
  dp3 r2.x, r4.xyzx, r5.xyzx
  lt r2.y, cb1[20].z, r2.x
  mad r2.x, -|r2.x|, l(0.250000), l(1.000000)
  movc r2.x, r2.y, l(0), r2.x
  add r1.z, r1.z, r2.x
  iadd r1.w, r1.w, l(1)
endloop 
mad r0.z, r1.z, l(0.250000), l(0.500000)
lt r0.w, l(0.500000), r0.z
if_nz r0.w
  mul r1.xy, cb1[18].xyxx, l(0.000977, 0.001302, 0.000000, 0.000000)
  div r1.zw, l(1.000000, 1.000000, 1.000000, 1.000000), cb1[18].xxxy
  round_z r2.xy, r0.xyxx
  mul r2.zw, r1.zzzw, r2.xxxy
  mul r3.xy, r0.xyxx, r1.zwzz
  movc r2.zw, cb0[0].xxxx, r2.zzzw, r3.xxxy
  sample_l r0.w, r2.zwzz, t3.yzwx, s0, l(0.000000)
  add r0.w, r0.w, -cb1[19].w
  div r0.w, -cb1[20].x, r0.w
  if_nz cb0[0].w
    if_nz cb0[0].x
      sample_l r3.x, r2.zwzz, t1.xyzw, s0, l(0.000000)
    else 
      sample_l r3.x, r2.zwzz, t0.xyzw, s0, l(0.000000)
    endif 
    mad r2.z, r3.x, cb1[20].y, r0.w
  endif 
  mov r3.xyzw, l(0,0,0,0)
  mov r4.xyzw, l(0,0,0,0)
  mov r2.w, l(0)
  loop 
    ige r5.x, r2.w, cb0[0].y
    breakc_nz r5.x
    mad r5.xy, r1.xyxx, icb[r2.w + 0].zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
    mad r5.zw, r1.xxxy, icb[r2.w + 0].zzzw, r0.xxxy
    mul r5.zw, r1.zzzw, r5.zzzw
    mad r6.xy, v1.xyxx, cb1[18].xyxx, -r5.xyxx
    mul r6.xy, r1.zwzz, r6.xyxx
    if_nz cb0[0].x
      add r6.zw, r2.xxxy, r5.xxxy
      mul r3.xy, r1.zwzz, r6.zwzz
      add r5.xy, r2.xyxx, -r5.xyxx
      add r5.xy, r5.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
      mul r3.zw, r1.zzzw, r5.xxxy
      gather4 r7.xyzw, r3.xyxx, t3.xyzw, s0.x
      add r7.xyzw, r7.xyzw, -cb1[19].wwww
      div r7.xyzw, -cb1[20].xxxx, r7.xyzw
      gather4 r8.xyzw, r3.zwzz, t3.xyzw, s0.x
      add r8.xyzw, r8.xyzw, -cb1[19].wwww
      div r8.xyzw, -cb1[20].xxxx, r8.xyzw
    else 
      sample_l(0,1,0) r9.x, r5.zwzz, t3.xyzw, s0, l(0.000000)
      sample_l(1,1,0) r9.y, r5.zwzz, t3.yxzw, s0, l(0.000000)
      sample_l(1,0,0) r9.z, r5.zwzz, t3.yzxw, s0, l(0.000000)
      sample_l(0,0,0) r9.w, r5.zwzz, t3.yzwx, s0, l(0.000000)
      add r9.xyzw, r9.xyzw, -cb1[19].wwww
      div r7.xyzw, -cb1[20].xxxx, r9.xyzw
      sample_l(0,1,0) r9.x, r6.xyxx, t3.xyzw, s0, l(0.000000)
      sample_l(1,1,0) r9.y, r6.xyxx, t3.yxzw, s0, l(0.000000)
      sample_l(1,0,0) r9.z, r6.xyxx, t3.yzxw, s0, l(0.000000)
      sample_l(0,0,0) r9.w, r6.xyxx, t3.yzwx, s0, l(0.000000)
      add r9.xyzw, r9.xyzw, -cb1[19].wwww
      div r8.xyzw, -cb1[20].xxxx, r9.xyzw
    endif 
    add r9.xyzw, r0.wwww, -r7.xyzw
    lt r10.xyzw, r9.xyzw, cb1[18].zzzz
    and r10.xyzw, r10.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
    lt r9.xyzw, cb1[19].xxxx, r9.xyzw
    and r9.xyzw, r9.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
    mul r9.xyzw, r9.xyzw, r10.xyzw
    add r10.xyzw, r0.wwww, -r8.zwxy
    lt r11.xyzw, r10.xyzw, cb1[18].zzzz
    and r11.xyzw, r11.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
    lt r10.xyzw, cb1[19].xxxx, r10.xyzw
    and r10.xyzw, r10.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
    mul r10.xyzw, r10.xyzw, r11.xyzw
    mul r9.xyzw, r9.xyzw, r10.xyzw
    mul r9.xyzw, r9.xyzw, icb[r2.w + 20].xyzw
    mad r4.xyzw, r9.xyzw, r0.zzzz, r4.xyzw
    if_nz cb0[0].w
      if_nz cb0[0].x
        gather4 r9.xyzw, r3.xyxx, t1.xyzw, s0.x
        gather4 r10.xyzw, r3.zwzz, t1.xyzw, s0.x
      else 
        sample_l(0,1,0) r9.x, r5.zwzz, t0.xyzw, s0, l(0.000000)
        sample_l(1,1,0) r9.y, r5.zwzz, t0.yxzw, s0, l(0.000000)
        sample_l(1,0,0) r9.z, r5.zwzz, t0.yzxw, s0, l(0.000000)
        sample_l(0,0,0) r9.w, r5.zwzz, t0.yzwx, s0, l(0.000000)
        sample_l(0,1,0) r10.x, r6.xyxx, t0.xyzw, s0, l(0.000000)
        sample_l(1,1,0) r10.y, r6.xyxx, t0.yxzw, s0, l(0.000000)
        sample_l(1,0,0) r10.z, r6.xyxx, t0.yzxw, s0, l(0.000000)
        sample_l(0,0,0) r10.w, r6.xyxx, t0.yzwx, s0, l(0.000000)
      endif 
      mad r5.xyzw, r9.xyzw, cb1[20].yyyy, r7.xyzw
      mad r6.xyzw, r10.zwxy, cb1[20].yyyy, r8.zwxy
      add r5.xyzw, r2.zzzz, -r5.xyzw
      lt r7.xyzw, r5.xyzw, cb1[18].zzzz
      and r7.xyzw, r7.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
      lt r5.xyzw, cb1[19].xxxx, r5.xyzw
      and r5.xyzw, r5.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
      mul r5.xyzw, r5.xyzw, r7.xyzw
      add r6.xyzw, r2.zzzz, -r6.xyzw
      lt r7.xyzw, r6.xyzw, cb1[18].zzzz
      and r7.xyzw, r7.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
      lt r6.xyzw, cb1[19].xxxx, r6.xyzw
      and r6.xyzw, r6.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
      mul r6.xyzw, r6.xyzw, r7.xyzw
      mul r5.xyzw, r5.xyzw, r6.xyzw
      mul r5.xyzw, r5.xyzw, icb[r2.w + 20].xyzw
      mad r4.xyzw, r5.xyzw, r0.zzzz, r4.xyzw
    endif 
    iadd r2.w, r2.w, l(1)
  endloop 
else 
  mov r4.xyzw, l(0,0,0,0)
endif 
if_nz cb0[0].w
  add r0.x, r4.y, r4.x
  add r0.x, r4.z, r0.x
  add r0.x, r4.w, r0.x
  iadd r0.y, cb0[0].z, l(-1)
  mul r0.y, l(3.000000), icb[r0.y + 4].x
  div r0.x, r0.x, r0.y
else 
  add r0.y, r4.y, r4.x
  add r0.y, r4.z, r0.y
  add r0.y, r4.w, r0.y
  iadd r0.z, cb0[0].z, l(-1)
  add r0.z, icb[r0.z + 4].x, icb[r0.z + 4].x
  div r0.x, r0.y, r0.z
endif 
mul_sat r0.x, r0.x, cb1[18].w
add o0.x, -r0.x, l(1.000000)
ret 
// Approximately 160 instruction slots used
