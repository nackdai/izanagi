//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//   fxc /T hs_5_0 /Fo DecalTessellation11.o /Fc DecalTessellation11.asm /EHS
//    DecalTessellation11.hlsl
//
//
// Buffer Definitions: 
//
// cbuffer cbInit
// {
//
//   float4 g_vMaterialColor;           // Offset:    0 Size:    16 [unused]
//   float4 g_vAmbientColor;            // Offset:   16 Size:    16 [unused]
//   float4 g_vSpecularColor;           // Offset:   32 Size:    16 [unused]
//   float4 g_vScreenSize;              // Offset:   48 Size:    16
//   float4 g_vFlags;                   // Offset:   64 Size:    16 [unused]
//
// }
//
// cbuffer cbUpdate
// {
//
//   float4x4 g_mWorld;                 // Offset:    0 Size:    64 [unused]
//   float4x4 g_mViewProjection;        // Offset:   64 Size:    64
//   float4x4 g_mWorldViewProjection;   // Offset:  128 Size:    64 [unused]
//   float4 g_vTessellationFactor;      // Offset:  192 Size:    16
//   float4 g_vDisplacementScaleBias;   // Offset:  208 Size:    16 [unused]
//   float4 g_vLightPosition;           // Offset:  224 Size:    16 [unused]
//   float4 g_vEyePosition;             // Offset:  240 Size:    16
//
// }
//
// cbuffer cbDamage
// {
//
//   float4 g_vNormal[50];              // Offset:    0 Size:   800
//   float4 g_vBinormal[50];            // Offset:  800 Size:   800 [unused]
//   float4 g_vTangent[50];             // Offset: 1600 Size:   800 [unused]
//   float4 g_vDecalPositionSize[50];   // Offset: 2400 Size:   800
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cbInit                            cbuffer      NA          NA    0        1
// cbUpdate                          cbuffer      NA          NA    1        1
// cbDamage                          cbuffer      NA          NA    2        1
//
//
//
// Patch Constant signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_TessFactor            0   x           0  TRIEDGE  float   x   
// SV_TessFactor            1   x           1  TRIEDGE  float   x   
// SV_TessFactor            2   x           2  TRIEDGE  float   x   
// SV_InsideTessFactor      0   x           3   TRIINT  float   x   
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// POSITION                 0   xyz         0     NONE  float   xyz 
// TEXCOORD                 0   xy          1     NONE  float   xy  
// NORMAL                   0   xyz         2     NONE  float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// WORLDPOS                 0   xyz         0     NONE  float   xyz 
// TEXCOORD                 0   xy          1     NONE  float   xy  
// NORMAL                   0   xyz         2     NONE  float   xyz 
//
// Tessellation Domain   # of control points
// -------------------- --------------------
// Triangle                                3
//
// Tessellation Output Primitive  Partitioning Type 
// ------------------------------ ------------------
// Clockwise Triangles            Odd Fractional    
//
hs_5_0
hs_decls 
dcl_input_control_point_count 3
dcl_output_control_point_count 3
dcl_tessellator_domain domain_tri
dcl_tessellator_partitioning partitioning_fractional_odd
dcl_tessellator_output_primitive output_triangle_cw
dcl_hs_max_tessfactor l(64.000000)
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[200], dynamicIndexed
hs_fork_phase 
dcl_input vicp[3][0].xyz
dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
dcl_output_siv o3.x, finalTriInsideTessFactor
dcl_temps 13
add r0.xyz, -vicp[1][0].xyzx, vicp[2][0].xyzx
add r1.xyz, -vicp[1][0].xyzx, vicp[0][0].xyzx
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb1[12].z
if_nz r0.w
  mul r2.xyz, r0.yzxy, r1.zxyz
  mad r2.xyz, r1.yzxy, r0.zxyz, -r2.xyzx
  dp3 r0.w, r2.xyzx, r2.xyzx
  rsq r0.w, r0.w
  mul r2.xyz, r0.wwww, r2.xyzx
  add r3.xyz, -cb1[15].xyzx, vicp[1][0].xyzx
  dp3 r0.w, r3.xyzx, r3.xyzx
  rsq r0.w, r0.w
  mul r3.xyz, r0.wwww, r3.xyzx
  dp3 r0.w, r3.xyzx, r2.xyzx
  lt r0.w, l(-0.250000), r0.w
  if_z r0.w
    mov o0.x, l(0)
    mov o1.x, l(0)
    mov o2.x, l(0)
    mov o3.x, l(0)
    ret 
  endif 
endif 
ne r2.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb1[12].ywyy
mov r3.xyz, vicp[1][0].xyzx
mov r3.w, l(1.000000)
dp4 r4.x, r3.xyzw, cb1[4].xyzw
dp4 r4.y, r3.xyzw, cb1[5].xyzw
dp4 r0.w, r3.xyzw, cb1[7].xyzw
div r2.zw, r4.xxxy, r0.wwww
add r2.zw, r2.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
mov r3.x, cb0[3].x
mov r3.y, l(0.500000)
mul r2.zw, r2.zzzw, r3.xxxy
mul r3.x, r2.z, l(0.500000)
mul r3.y, r2.w, -cb0[3].y
mov r4.xyz, vicp[2][0].xyzx
mov r4.w, l(1.000000)
dp4 r5.x, r4.xyzw, cb1[4].xyzw
dp4 r5.y, r4.xyzw, cb1[5].xyzw
dp4 r0.w, r4.xyzw, cb1[7].xyzw
div r2.zw, r5.xxxy, r0.wwww
add r2.zw, r2.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
mul r4.x, r2.z, cb0[3].x
mul r4.y, r2.w, -cb0[3].y
mov r5.xyz, vicp[0][0].xyzx
mov r5.w, l(1.000000)
dp4 r6.x, r5.xyzw, cb1[4].xyzw
dp4 r6.y, r5.xyzw, cb1[5].xyzw
dp4 r0.w, r5.xyzw, cb1[7].xyzw
div r2.zw, r6.xxxy, r0.wwww
add r2.zw, r2.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
mul r5.x, r2.z, cb0[3].x
mul r5.y, r2.w, -cb0[3].y
mul r2.zw, r5.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
mad r3.zw, -r4.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), r3.xxxy
dp2 r0.w, r3.zwzz, r3.zwzz
sqrt r0.w, r0.w
mul r0.w, r0.w, l(0.062500)
div_sat r0.w, r0.w, cb1[12].x
mul r6.x, r0.w, cb1[12].x
mad r2.zw, r4.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), -r2.zzzw
dp2 r0.w, r2.zwzz, r2.zwzz
sqrt r0.w, r0.w
mul r0.w, r0.w, l(0.062500)
div_sat r0.w, r0.w, cb1[12].x
mul r6.y, r0.w, cb1[12].x
mad r2.zw, r5.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), -r3.xxxy
dp2 r0.w, r2.zwzz, r2.zwzz
sqrt r0.w, r0.w
mul r0.w, r0.w, l(0.062500)
div_sat r0.w, r0.w, cb1[12].x
mul r6.z, r0.w, cb1[12].x
max r0.w, r6.z, r6.y
max r6.w, r0.w, r6.x
movc r3.xyzw, r2.xxxx, r6.xyzw, cb1[12].xxxx
if_z r2.y
  min r2.xyzw, r3.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)
  mov o0.x, r2.x
  mov o1.x, r2.y
  mov o2.x, r2.z
  mov o3.x, r2.w
  ret 
endif 
dp3 r0.w, r0.xyzx, r0.xyzx
add r2.xyz, -vicp[2][0].xyzx, vicp[0][0].xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
dp3 r2.w, r1.xyzx, r1.xyzx
dp3 r4.x, r0.xyzx, r1.xyzx
mul r4.y, r4.x, r4.x
mad r4.y, r0.w, r2.w, -r4.y
div r4.y, l(1.000000, 1.000000, 1.000000, 1.000000), r4.y
mul r5.xyz, r0.zxyz, r1.yzxy
mad r5.xyz, r0.yzxy, r1.zxyz, -r5.xyzx
dp3 r4.z, r5.xyzx, r5.xyzx
rsq r4.z, r4.z
mul r5.xyz, r4.zzzz, r5.xyzx
mov r6.xz, r3.xxyx
mov r6.yw, l(0,-1,0,-1)
mov r7.x, r3.z
mov r7.y, l(-1)
mov r8.xyzw, l(1.000000,1.000000,1.000000,1.000000)
mov r3.y, l(0)
loop 
  ige r3.z, r3.y, l(50)
  breakc_nz r3.z
  eq r9.xyz, cb2[r3.y + 0].xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  and r3.z, r9.y, r9.x
  and r3.z, r9.z, r3.z
  if_nz r3.z
    break 
  endif 
  mul r3.z, cb2[r3.y + 150].w, cb2[r3.y + 150].w
  add r9.xyz, cb2[r3.y + 150].xyzx, -vicp[1][0].xyzx
  dp3 r4.z, r9.xyzx, r9.xyzx
  add r10.xyz, cb2[r3.y + 150].xyzx, -vicp[2][0].xyzx
  dp3 r4.w, r10.xyzx, r10.xyzx
  add r11.xyz, cb2[r3.y + 150].xyzx, -vicp[0][0].xyzx
  dp3 r5.w, r11.xyzx, r11.xyzx
  ge r7.zw, r3.zzzz, r4.zzzw
  or r9.w, r7.w, r7.z
  dp3 r10.w, r9.xyzx, r0.xyzx
  div r11.w, r10.w, r0.w
  mul r12.xyz, r0.xyzx, r11.wwww
  dp3 r11.w, r12.xyzx, r12.xyzx
  add r4.z, r4.z, -r11.w
  ge r4.z, r3.z, r4.z
  dp3 r12.x, r12.xyzx, r0.xyzx
  ge r12.x, r12.x, l(0.000000)
  and r4.z, r4.z, r12.x
  ge r11.w, r0.w, r11.w
  and r12.y, r4.z, r11.w
  movc r12.x, r12.y, r3.x, r8.x
  movc r12.xy, r9.wwww, r6.xyxx, r12.xyxx
  ge r4.z, r3.z, r5.w
  or r7.w, r4.z, r7.w
  dp3 r9.w, r10.xyzx, r2.xyzx
  div r9.w, r9.w, r1.w
  mul r10.xyz, r2.xyzx, r9.wwww
  dp3 r9.w, r10.xyzx, r10.xyzx
  add r4.w, r4.w, -r9.w
  ge r4.w, r3.z, r4.w
  dp3 r10.x, r10.xyzx, r2.xyzx
  ge r10.x, r10.x, l(0.000000)
  and r4.w, r4.w, r10.x
  ge r9.w, r1.w, r9.w
  and r4.w, r4.w, r9.w
  or r4.zw, r4.zzzw, r7.zzzw
  mov r12.z, r8.y
  movc r8.xy, r4.wwww, r6.wzww, r12.yzyy
  dp3 r4.w, r11.xyzx, -r1.xyzx
  div r4.w, r4.w, r2.w
  mul r10.xyz, -r1.xyzx, r4.wwww
  dp3 r4.w, r10.xyzx, r10.xyzx
  add r5.w, -r4.w, r5.w
  ge r3.z, r3.z, r5.w
  dp3 r5.w, r10.xyzx, -r1.xyzx
  ge r5.w, r5.w, l(0.000000)
  and r3.z, r3.z, r5.w
  ge r4.w, r2.w, r4.w
  and r3.z, r3.z, r4.w
  or r3.z, r4.z, r3.z
  movc r8.xz, r3.zzzz, r7.yyxy, r8.xxzx
  dp3 r3.z, r5.xyzx, r9.xyzx
  ge r3.z, cb2[r3.y + 150].w, |r3.z|
  dp3 r4.z, r1.xyzx, r9.xyzx
  mul r4.w, r4.z, r4.x
  mad r4.w, r2.w, r10.w, -r4.w
  mul r5.w, r4.y, r4.w
  mul r7.z, r4.x, r10.w
  mad r4.z, r0.w, r4.z, -r7.z
  mul r4.z, r4.y, r4.z
  lt r5.w, l(0.000000), r5.w
  lt r7.z, l(0.000000), r4.z
  and r5.w, r5.w, r7.z
  mad r4.z, r4.w, r4.y, r4.z
  lt r4.z, r4.z, l(1.000000)
  and r4.z, r4.z, r5.w
  or r4.z, r8.x, r4.z
  movc r4.z, r4.z, r3.w, r8.w
  movc r8.w, r3.z, r4.z, r8.w
  iadd r3.y, r3.y, l(1)
  mov r8.x, r12.x
endloop 
min r0.xyzw, r8.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)
mov o0.x, r0.x
mov o1.x, r0.y
mov o2.x, r0.z
mov o3.x, r0.w
ret 
// Approximately 190 instruction slots used
