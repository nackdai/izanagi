//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20499
//
//
///
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
//   float g_fGlobalTime;               // Offset:   64 Size:     4
//   float g_fUndulate;                 // Offset:   68 Size:     4 [unused]
//   float4 vMaterialSpec;              // Offset:   80 Size:    16 [unused]
//   float4 vMaterialDiff;              // Offset:   96 Size:    16 [unused]
//
// }
//
// cbuffer cbUIUpdates
// {
//
//   float g_fLifeSpan;                 // Offset:    0 Size:     4
//   float g_fLifeSpanVar;              // Offset:    4 Size:     4 [unused]
//   float g_fRadiusMin;                // Offset:    8 Size:     4 [unused]
//   float g_fRadiusMax;                // Offset:   12 Size:     4 [unused]
//   float g_fGrowTime;                 // Offset:   16 Size:     4 [unused]
//   float g_fStepSize;                 // Offset:   20 Size:     4
//   float g_fTurnRate;                 // Offset:   24 Size:     4
//   float g_fTurnSpeed;                // Offset:   28 Size:     4 [unused]
//   float g_fLeafRate;                 // Offset:   32 Size:     4
//   float g_fShrinkTime;               // Offset:   36 Size:     4 [unused]
//   uint g_uMaxFaces;                  // Offset:   40 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samPoint                        sampler      NA          NA    0        1
// g_txRandom                        texture  float4          1d    0        1
// g_adjBuffer                       texture  float3         buf    1        1
// g_triCenterBuffer                 texture  float4         buf    2        1
// cb0                               cbuffer      NA          NA    0        1
// cbUIUpdates                       cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// DIRECTION                0   xyz         2     NONE   float   xyz 
// TIMERNTYPE               0   xy          3     NONE   float   xy  
// PIPELIFE                 0     z         3     NONE   float     z 
// TARGETDIR                0   xyz         4     NONE   float   xyz 
// CURRENTFACE              0   x           5     NONE    uint   x   
// LEAVES                   0    y          5     NONE    uint    y  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// OUT_POSITION             0   xyz         0     NONE   float   xyz 
// OUT_NORMAL               0   xyz         1     NONE   float   xyz 
// OUT_DIRECTION            0   xyz         2     NONE   float   xyz 
// OUT_TIMERNTYPE           0   xy          3     NONE   float   xy  
// OUT_PIPELIFE             0     z         3     NONE   float     z 
// OUT_TARGETDIR            0   xyz         4     NONE   float   xyz 
// OUT_CURRENTFACE          0   x           5     NONE    uint   x   
// OUT_LEAVES               0    y          5     NONE    uint    y  
//
gs_4_0
dcl_constantbuffer cb0[5], immediateIndexed
dcl_constantbuffer cb1[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture1d (float,float,float,float) t0
dcl_resource_buffer (float,float,float,float) t1
dcl_resource_buffer (float,float,float,float) t2
dcl_input v[1][0].xyz
dcl_input v[1][1].xyz
dcl_input v[1][2].xyz
dcl_input v[1][3].xy
dcl_input v[1][3].z
dcl_input v[1][4].xyz
dcl_input v[1][5].x
dcl_input v[1][5].y
dcl_temps 11
dcl_inputprimitive point 
dcl_outputtopology pointlist 
dcl_output o0.xyz
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xy
dcl_output o3.z
dcl_output o4.xyz
dcl_output o5.x
dcl_output o5.y
dcl_maxout 2
eq r0.x, l(0.000000), v[0][3].y
if_nz r0.x
  eq r0.x, l(0.000000), v[0][3].x
  if_nz r0.x
    ishl r0.x, v[0][5].x, l(1)
    ld r1.xyzw, r0.xxxx, t2.xyzw
    iadd r0.x, r0.x, l(1)
    ld r0.xyzw, r0.xxxx, t2.xyzw
    utof r0.w, v[0][5].x
    add r0.w, r0.w, cb0[4].x
    mul r0.w, r0.w, l(0.000977)
    sample_l r2.xyzw, r0.w, t0.xyzw, s0, l(0.000000)
    dp3 r0.w, r2.xyzx, r2.xyzx
    rsq r0.w, r0.w
    mul r2.xyz, r0.wwww, r2.xyzx
    mul r3.xyz, r0.zxyz, r2.xyzx
    mad r2.xyz, r2.zxyz, r0.xyzx, -r3.xyzx
    mul r3.xyz, r0.zxyz, r2.xyzx
    mad r2.xyz, r0.yzxy, r2.yzxy, -r3.xyzx
    dp3 r0.w, r2.xyzx, r2.xyzx
    rsq r0.w, r0.w
    mul r2.xyz, r0.wwww, r2.xyzx
    iadd r0.w, l(100), v[0][5].x
    utof r0.w, r0.w
    add r0.w, r0.w, cb0[4].x
    mul r0.w, r0.w, l(0.000977)
    sample_l r3.xyzw, r0.w, t0.xyzw, s0, l(0.000000)
    dp3 r0.w, r3.xyzx, r3.xyzx
    rsq r0.w, r0.w
    mul r0.w, r0.w, r3.x
    mul r0.w, r0.w, l(10.000000)
    mov r3.z, -r0.w
    mov r4.xyz, r1.xyzx
    add r3.x, cb1[0].x, l(1.000000)
    mov r3.y, l(1.000000)
  else 
    mov r4.xyz, v[0][0].xyzx
    mov r0.xyz, v[0][1].xyzx
    mov r2.xyz, v[0][2].xyzx
    add r3.xz, l(-1.000000, 0.000000, 0.000000, 0.000000), v[0][3].xxzx
    mov r3.y, l(0)
    mov r1.xyz, v[0][4].xyzx
  endif 
  mov o0.xyz, r4.xyzx
  mov o1.xyz, r0.xyzx
  mov o2.xyz, r2.xyzx
  mov o3.xyz, r3.xyzx
  mov o4.xyz, r1.xyzx
  mov o5.xy, v[0][5].xyxx
  emit 
else 
  eq r0.x, l(1.000000), v[0][3].y
  if_nz r0.x
    add r0.xyz, v[0][0].xyzx, -v[0][4].xyzx
    dp3 r0.x, r0.xyzx, r0.xyzx
    sqrt r0.x, r0.x
    lt r0.x, r0.x, cb1[1].y
    if_nz r0.x
      imul null, r0.x, l(3), v[0][5].x
      ld r0.xyzw, r0.xxxx, t1.xyzw
      imad r0.yz, v[0][5].xxxx, l(0, 3, 3, 0), l(0, 1, 2, 0)
      ld r1.xyzw, r0.yyyy, t1.xyzw
      ld r2.xyzw, r0.zzzz, t1.xyzw
      add r0.y, r0.x, r0.x
      ftoi r0.y, r0.y
      ld r3.xyzw, r0.yyyy, t2.xyzw
      mad r0.y, r0.x, l(2.000000), l(1.000000)
      ftoi r0.y, r0.y
      ld r4.xyzw, r0.yyyy, t2.xyzw
      add r0.yzw, r3.xxyz, -v[0][4].xxyz
      add r1.y, r1.x, r1.x
      ftoi r1.y, r1.y
      ld r5.xyzw, r1.yyyy, t2.xyzw
      mad r1.y, r1.x, l(2.000000), l(1.000000)
      ftoi r1.y, r1.y
      ld r6.xyzw, r1.yyyy, t2.xyzw
      add r1.yzw, r5.xxyz, -v[0][4].xxyz
      add r2.y, r2.x, r2.x
      ftoi r2.y, r2.y
      ld r7.xyzw, r2.yyyy, t2.xyzw
      mad r2.y, r2.x, l(2.000000), l(1.000000)
      ftoi r2.y, r2.y
      ld r8.xyzw, r2.yyyy, t2.xyzw
      add r2.yzw, r7.xxyz, -v[0][4].xxyz
      utof r4.w, v[0][5].x
      add r4.w, r4.w, cb0[4].x
      mul r4.w, r4.w, l(0.000977)
      sample_l r9.xyzw, r4.w, t0.xyzw, s0, l(0.000000)
      dp3 r4.w, r9.xyzx, r9.xyzx
      rsq r4.w, r4.w
      mul r4.w, r4.w, r9.x
      lt r4.w, |r4.w|, cb1[1].z
      if_nz r4.w
        add r4.w, cb0[4].x, l(15.000000)
        mul r4.w, r4.w, l(0.000977)
        sample_l r9.xyzw, r4.w, t0.xyzw, s0, l(0.000000)
      else 
        mov r9.xyz, v[0][2].xyzx
      endif 
      dp3 r4.w, r0.yzwy, r0.yzwy
      rsq r4.w, r4.w
      mul r0.yzw, r0.yyzw, r4.wwww
      dp3 r0.y, r9.xyzx, r0.yzwy
      dp3 r0.z, r1.yzwy, r1.yzwy
      rsq r0.z, r0.z
      mul r1.yzw, r0.zzzz, r1.yyzw
      dp3 r0.z, r9.xyzx, r1.yzwy
      dp3 r0.w, r2.yzwy, r2.yzwy
      rsq r0.w, r0.w
      mul r1.yzw, r0.wwww, r2.yyzw
      dp3 r0.w, r9.xyzx, r1.yzwy
      lt r1.y, r0.x, l(40000000.000000)
      lt r1.z, r0.z, r0.y
      and r1.y, r1.z, r1.y
      mul r2.yzw, r4.zzxy, r9.xxyz
      mad r2.yzw, r9.zzxy, r4.xxyz, -r2.yyzw
      mul r10.xyz, r2.yzwy, r4.zxyz
      mad r2.yzw, r4.yyzx, r2.zzwy, -r10.xxyz
      dp3 r1.z, r2.yzwy, r2.yzwy
      rsq r1.z, r1.z
      mul r2.yzw, r1.zzzz, r2.yyzw
      ftou r3.w, r0.x
      lt r0.x, r1.x, l(40000000.000000)
      lt r0.y, r0.y, r0.z
      and r0.x, r0.y, r0.x
      lt r0.y, r0.w, r0.z
      and r0.x, r0.y, r0.x
      mul r0.yzw, r6.zzxy, r9.xxyz
      mad r0.yzw, r9.zzxy, r6.xxyz, -r0.yyzw
      mul r10.xyz, r0.yzwy, r6.zxyz
      mad r0.yzw, r6.yyzx, r0.zzwy, -r10.xxyz
      dp3 r1.z, r0.yzwy, r0.yzwy
      rsq r1.z, r1.z
      mul r0.yzw, r0.yyzw, r1.zzzz
      ftou r5.w, r1.x
      mul r1.xzw, r8.zzxy, r9.xxyz
      mad r1.xzw, r9.zzxy, r8.xxyz, -r1.xxzw
      mul r9.xyz, r1.xzwx, r8.zxyz
      mad r1.xzw, r8.yyzx, r1.zzwx, -r9.xxyz
      dp3 r4.w, r1.xzwx, r1.xzwx
      rsq r4.w, r4.w
      mul r1.xzw, r1.xxzw, r4.wwww
      ftou r7.w, r2.x
      movc r5.xyzw, r0.xxxx, r5.xyzw, r7.xyzw
      movc r6.xyz, r0.xxxx, r6.xyzx, r8.xyzx
      movc r0.xyz, r0.xxxx, r0.yzwy, r1.xzwx
      movc r1.xzw, r1.yyyy, r4.xxyz, r6.xxyz
      movc r0.xyz, r1.yyyy, r2.yzwy, r0.xyzx
      movc r2.xyzw, r1.yyyy, r3.xyzw, r5.xyzw
      mov o0.xyz, v[0][4].xyzx
      mov o1.xyz, r1.xzwx
      mov o2.xyz, r0.xyzx
      mov o3.xz, v[0][3].xxzx
      mov o3.y, l(1.000000)
      mov o4.xyz, r2.xyzx
      mov o5.x, r2.w
      mov o5.y, v[0][5].y
      emit 
    else 
      add r0.xyz, -v[0][0].xyzx, v[0][4].xyzx
      dp3 r0.x, r0.xyzx, r0.xyzx
      sqrt r0.x, r0.x
      mad r0.xyz, v[0][2].xyzx, r0.xxxx, v[0][0].xyzx
      add r1.xyz, -r0.xyzx, v[0][4].xyzx
      mad r0.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r0.xyzx
      add r0.xyz, r0.xyzx, -v[0][0].xyzx
      dp3 r0.w, r0.xyzx, r0.xyzx
      rsq r0.w, r0.w
      mul r0.xyz, r0.wwww, r0.xyzx
      mad r1.xyz, r0.xyzx, cb1[1].yyyy, v[0][0].xyzx
      mul r2.xyz, r0.zxyz, v[0][1].xyzx
      mad r2.xyz, v[0][1].zxyz, r0.xyzx, -r2.xyzx
      mul r3.xyz, r0.zxyz, r2.xyzx
      mad r2.xyz, r0.yzxy, r2.yzxy, -r3.xyzx
      dp3 r0.w, r2.xyzx, r2.xyzx
      rsq r0.w, r0.w
      mul r2.xyz, r0.wwww, r2.xyzx
      utof r0.w, v[0][5].x
      add r0.w, r0.w, cb0[4].x
      mul r0.w, r0.w, l(0.000977)
      sample_l r3.xyzw, r0.w, t0.xyzw, s0, l(0.000000)
      dp3 r0.w, r3.xyzx, r3.xyzx
      rsq r0.w, r0.w
      mul r3.xyz, r0.wwww, r3.xyzx
      lt r0.w, |r3.x|, cb1[2].x
      mul r1.w, |r3.y|, l(2000.000000)
      ftou r1.w, r1.w
      and r0.w, r0.w, r1.w
      lt r1.w, cb1[0].x, v[0][3].z
      utof r2.w, cb1[2].z
      mul r2.w, r2.w, |r3.z|
      ftou r3.z, r2.w
      mov r3.xyw, l(0,0,0,0)
      mov r4.x, cb1[0].x
      mov r4.y, l(1.000000)
      mov r4.z, v[0][5].x
      mov r4.w, v[0][3].z
      movc r3.xyzw, r1.wwww, r3.xyzw, r4.xyzw
      mov o0.xyz, r1.xyzx
      mov o1.xyz, r2.xyzx
      mov o2.xyz, r0.xyzx
      mov o3.xyz, r3.xywx
      mov o4.xyz, v[0][4].xyzx
      mov o5.x, r3.z
      mov o5.y, r0.w
      emit 
    endif 
  endif 
  add r0.xy, l(-1.000000, 1.000000, 0.000000, 0.000000), v[0][3].xzxx
  ne r0.z, r0.x, l(0.000000)
  lt r0.w, r0.y, cb1[0].x
  and r0.z, r0.w, r0.z
  if_nz r0.z
    mov o0.xyz, v[0][0].xyzx
    mov o1.xyz, v[0][1].xyzx
    mov o2.xyz, v[0][2].xyzx
    mov o3.xz, r0.xxyx
    mov o3.y, l(3.000000)
    mov o4.xyz, v[0][4].xyzx
    mov o5.xy, v[0][5].xyxx
    emit 
  endif 
endif 
ret 
// Approximately 224 instruction slots used
