//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20499
//
//
///
// Buffer Definitions: 
//
// cbuffer cbConstant
// {
//
//   float3 vLightDir;                  // Offset:    0 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// samLinear                         sampler      NA          NA    0        1
// g_txDiffuse                       texture  float4          2d    0        1
// cbConstant                        cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xy          2     NONE   float   xy  
// VTXID                    0   x           3     NONE    uint   x   
// SV_PrimitiveID           0    y          3   PRIMID    uint    y  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xy
dcl_input_ps constant v3.x
dcl_input_ps_sgv v3.y, primitive_id
dcl_output o0.xyzw
dcl_temps 2
utof r0.x, v3.y
utof r0.y, v3.x
div r0.x, r0.x, r0.y
add r0.y, -r0.x, l(1.000000)
mul r0.yzw, r0.yyyy, l(0.000000, 1.000000, 0.000000, 0.000000)
mad r0.xyz, r0.xxxx, l(1.000000, 0.000000, 1.000000, 0.000000), r0.yzwy
dp3_sat r0.w, v1.xyzx, cb0[0].xyzx
sample r1.xyzw, v2.xyxx, t0.xyzw, s0
mul r1.xyz, r0.wwww, r1.xyzx
mul o0.xyz, r0.xyzx, r1.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 12 instruction slots used
