#line 1 "D:/work/izanagi/Libs/source/graph/2d/shader/2DPS.hlsl"
#line 1 "D:/work/izanagi/Libs/source/graph/2d/shader/2DShader.hlsl"


struct SVSInput {
 float4 vPos : POSITION;
 float4 vColor : COLOR;
 float2 vUV : TEXCOORD0;
};

struct SPSInput {
 float4 vPos : POSITION;
 float4 vColor : COLOR;
 float2 vUV : TEXCOORD0;
};
#line 5 "D:/work/izanagi/Libs/source/graph/2d/shader/2DPS.hlsl"
sampler sTex : register(s0);
#line 13
float4 main_OpVtx(SPSInput sIn) : COLOR
{

 float4 vColor = sIn.vColor;
 return vColor.bgra;;
}

float4 main_OpTex(SPSInput sIn) : COLOR
{

 float4 vColor = tex2D(sTex, sIn.vUV);
 return vColor.bgra;;
}

float4 main_OpModulate(SPSInput sIn) : COLOR
{

 float4 vColor = sIn.vColor * tex2D(sTex, sIn.vUV);
 return saturate(vColor).bgra;;
}

float4 main_OpModulate2x(SPSInput sIn) : COLOR
{

 float4 vColor = sIn.vColor * tex2D(sTex, sIn.vUV) * 2.0f;
 return saturate(vColor).bgra;;
}

float4 main_OpModulate4x(SPSInput sIn) : COLOR
{

 float4 vColor = sIn.vColor * tex2D(sTex, sIn.vUV) * 4.0f;
 return saturate(vColor).bgra;;
}

float4 main_OpAdd(SPSInput sIn) : COLOR
{

 float4 vColor = sIn.vColor + tex2D(sTex, sIn.vUV);
 return saturate(vColor).bgra;;
}

float4 main_OpModulateAlpha(SPSInput sIn) : COLOR
{


 float4 vColor = sIn.vColor * float4(1.0f, 1.0f, 1.0f, tex2D(sTex, sIn.vUV).a);
#line 66
 return saturate(vColor).bgra;;
}

float4 main_OpNoTexAlpha(SPSInput sIn) : COLOR
{

 float4 vColor = sIn.vColor;
 vColor.rgb *= tex2D(sTex, sIn.vUV).rgb;
 return saturate(vColor).bgra;;
}

float4 main_OpTexAsDepth(SPSInput sIn) : COLOR
{
 float4 vColor = tex2D(sTex, sIn.vUV);
 float depth = vColor.r + vColor.g / 256.0f + vColor.b / (256.0f * 256.0f);
 return float4(depth, depth, depth, 1.0f);
}
