* Android
Android向けの実行環境サンプル

* Archive
アセットデータをパッキングした独自のデータを利用したサンプル

* BasicAnimation
タイムラインとインターポレーターを利用したアニメーション計算のサンプル

* Binding
C# WPFのデータバインディングに相当するサンプル

* Cubemap
キューブマップを利用した描画サンプル

* DebugMesh
デバッグ用のメッシュデータを利用した描画サンプル

* Decal
デカールメッシュを利用した描画サンプル

* Event
C#のイベントに相当するサンプル

* FontBitmap
独自のビットマップフォントデータを利用した描画サンプル

* FontFreeType
freetypeを利用した描画サンプル

* FontRenderer
独自のフォントキャッシュとフォント描画機構を利用した描画サンプル

* GamePad
ゲームパッド（XInput）を利用したサンプル
実行前にXInputに対応したゲームパッドをPCに挿しておく必要がある

* GestureDetector
タッチ（マウス）データをジェスチャに判定するサンプル
ジェスチャの判定結果はコンソールウインドウに出力される

* Instancing
インスタンシングを利用した描画サンプル（DX9のみ）

* JobQueue
任意の処理をワーカースレッドにリクエストするサンプル
処理の状況はコンソールウインドウに出力される

* Material
マテリアルデータを利用した描画サンプル
collada、xファイルに埋め込まれたマテリアルデータを独自のマテリアルデータに変換して利用する

* MessageQueue
ワーカースレッドでポストされたメッセージをメインスレッドで受け取るサンプル
メッセージの受け取りの結果はコンソールウインドウに出力される

* Model
3Dスキニングモデルデータの描画サンプル
collada、xファイルを独自の3Dスキニングモデルデータに変換して利用する

* Motion
3Dスキニングモデルをアニメーションさせるサンプル
collada、xファイルに埋め込まれたアニメーションデータを独自のアニメーションデータに変換して利用する

* MotionBind
3Dスキニングモデルのボーンごとに異なるアニメーションを設定するサンプル

* MotionBlend
２つのモデルアニメーションを任意の比率でブレンドしたアニメーション利用するサンプル

* MotionInterp
２つのモデルアニメーションを補間するサンプル
Enterでアニメーションの補間を行うことができる

* MouseHit
3D空間に配置された矩形へのマウスヒット判定のサンプル
Ctrlキーを押しながらマウス左ボタンクリックすることでヒット判定が行われる
マウスヒット判定された矩形は半透明となる

* ObjectReference
オブジェクトを参照管理するサンプル

* Parallel
C#のParallelに相当するサンプル

* PostEffect
ポストエフェクトを利用して描画するサンプル
ポストエフェクトシェーダを事前にコンパイル、変換することで独自のポストエフェクトデータに変換して利用する
キーボードの上下キーでポストエフェクトの種類を切り替えることができる
ShiftキーでポストエフェクトのOn/Offを切り替えることができる

確認できるポストエフェクトは以下
 - Monotone
    モノトーン変換したもの
 - Sepia
    セピア変換したもの
 - BloomStar
    閾値より明るい部分にブルーム、スター表現したもの
 - BloomStarMGF
    閾値より明るい部分にブルーム、スター表現したもの
    ブルーム作成時にMultiGaussianFilterを利用
 - HDR
    HDRレンダリングされたシーンに対してトーンマップ、暗順応したもの
 - HDR2
    HDRレンダリングされたシーンに対してトーンマップ、暗順応したもの
    HDRに比べて、暗順応の計算を複雑にしたもの

* Profiler
簡易プロファイラを利用するサンプル

* ProjectedTextureShadow
ライトからのプロジェクトテクスチャを利用した影描画のサンプル

* Render2D
2D描画を行うサンプル

* ResourceManager
リソースデータの管理を行うサンプル

* ScreenShot
スクリーンショットを保存するサンプル（DX9のみ）
キーボードのsキーを押すことでexeファイルと同じディレクトリに"screenshot.png"で保存される

* Shader
任意のシェーダを利用して描画するサンプル
シェーダを事前にコンパイル、変換することで独自のシェーダデータに変換して利用する
キーボードの上下キーでシェーダの種類を切り替えることができる

確認できるシェーダは以下
 - MirrorMap
    MirrorMapを利用した描画を行うシェーダ
 - NormalMap
    法線マップを利用した描画を行うシェーダ
 - PhongShader
    Phongライティングによる描画を行うシェーダ
 - PointLight
    ポイントライトによる描画を行うシェーダ
 - SpotLight
    スポットライトによる描画を行うシェーダ
 - SSAO
    ScreenSpaceAmibentOcclusionによる描画を行うシェーダ

* State
状態（ステート）切替を行うサンプル
キーボードの上下キーで状態（ステート）を切り替えることができる

* Storyboard
複数のインターポレーターを組み合わせて一つのアニメーションとして計算するサンプル

* Task
任意の処理をワーカースレッドにポストするサンプル
JobQueueと異なり、共用のスレッドプールに対してポストされる

* TextParagraph
フォント描画範囲に応じてフォントの表示段組みを変化させるサンプル
キーボードの左右キーで幅、上下キーで高さを変更することができる

* TimerThread
ワーカースレッドに定期的に実行されるタスクと遅延して実行されるタスクをポストして利用するサンプル
定期的に実行されるタスクは初期化時にポストされる
スペースキーで遅延して実行されるタスクがポストされる
Backキーで遅延して実行されるタスクがキャンセルされる
Deleteキーで定期的に実行されるタスクがキャンセルされる。こちらは一度キャンセルされるとポストはされない

* WaterDrop
2D描画においてユーザー任意のシェーダで描画するサンプル

* Web
Emscriptenでコンパイルしたhtml、jsの実行環境サンプル
